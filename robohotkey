#!/usr/bin/env python3

import subprocess
import atexit
import time
import sys
import base64
import io
import collections
import pystray
import PIL.Image

state = False

def help_message():
    print("robohotkey: missing hotkey file")
    print("Usage: robohotkey hotkey_file.rbk")
    sys.exit()

if len(sys.argv) < 2:
    help_message()

filepath = sys.argv[1]

if filepath in ["-h", "--help", "-help", "--h"]:
    help_message()

file_lines = list(map(str.strip, open(filepath, "r", encoding="UTF-8").readlines()))

hotkeys = []
hotkey = collections.namedtuple('hotkey', ['input_key', 'output_key'])
for file_line in file_lines:
    hotkey_line = file_line.split("->")
    if file_line.strip().startswith("//") or len(hotkey_line) < 2:
        continue
    hotkeys.append(hotkey(input_key = hotkey_line[0].strip(), output_key = hotkey_line[1].strip()))

def hotkeys_enabled():
    global state, hotkeys
    if state == True:
        subprocess.run("setxkbmap", shell = True)
    else:
        for hotkey in hotkeys:
            subprocess.run("xmodmap -e 'keysym " + hotkey.input_key + " = " + hotkey.output_key + "'", shell = True)
    state = not state

hotkeys_enabled()

atexit.register(hotkeys_enabled)

def icon_image():
    return PIL.Image.open(io.BytesIO(base64.b64decode("")))

def exit_program():
    sys.exit()

menu = pystray.Menu(pystray.MenuItem("Hotkeys Enabled", hotkeys_enabled, checked = lambda item: state), pystray.MenuItem("Exit", exit_program))
icon = pystray.Icon('Robohotkey', icon = icon_image(), menu = menu).run()
